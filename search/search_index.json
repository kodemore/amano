{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Amano DB","text":"<p>AWS DynamoDB Abstraction Layer.</p>"},{"location":"#what-is-amano","title":"What is Amano?","text":"<p>Amano is a Table Data Gateway Pattern implementation, which means there are two objects:</p> <ul> <li>a table, represented by <code>amano.Table</code></li> <li>an item, represented by <code>amano.Item</code></li> </ul> <p> </p> Amano's high level design <p>A <code>Table</code> represents DynamoDB's table and acts as an access layer to a given table. An <code>Item</code> represents a single record in DynamoDB's table.</p> <p>It can understand existing schema to simplify daily tasks like; storing, retrieving and querying data.</p> <p>Amano has a built-in auto-index resolving mechanism, if there is an index, it will automatically pick the best matching index for the query. This should simplify your queries and decrease development time. </p>"},{"location":"#features","title":"Features","text":"<ul> <li>Hydration and extraction of table items</li> <li>Simple query mechanism with elegant abstraction</li> <li>Interface for easy storing and retrieving data</li> <li>Intelligent algorithm that saves DynamoDB's quota and money</li> </ul>"},{"location":"cookbook/","title":"Cookbook","text":"<p>If you prefer to read code by examples instead going through entire documentation, here is good news for you. This cookbook is a collection of all examples present in our entire documentation. Familiarising and understanding all the example below means you should be able to use most of the features provided by the Amano library.</p>"},{"location":"cookbook/#item","title":"Item","text":""},{"location":"cookbook/#definition","title":"Definition","text":"Basic example<pre><code>from amano import Item\n\n\nclass Forum(Item):\n    ForumName: str\n    Category: str\n    Threads: int = 0\n    Messages: int = 0\n    Views: int = 0\n</code></pre> Built-in item initializer<pre><code>from amano import Item\n\n\nclass Forum(Item):\n    ForumName: str\n    Category: str\n    Threads: int = 0\n    Messages: int = 0\n    Views: int = 0\n\n\nitem = Forum(ForumName=\"Forum Name\", Category=\"Category\")\n</code></pre> Dataclass example<pre><code>from amano import Item\nfrom dataclasses import dataclass\n\n\n@dataclass\nclass Forum(Item):\n    ForumName: str\n    Category: str\n    Threads: int = 0\n    Messages: int = 0\n    Views: int = 0\n</code></pre>"},{"location":"cookbook/#instantiation","title":"Instantiation","text":"Basic instantiation<pre><code>from amano import Item\n\n\nclass Forum(Item):\n    ForumName: str\n    Category: str\n    Threads: int = 0\n    Messages: int = 0\n    Views: int = 0\n\n    def __init__(self, name: str, category: str):\n        self.ForumName = name\n        self.Category = category\n\n\nitem = Forum(\"Forum Name\", \"Category Name\")\n</code></pre> Instantiation from a dict<pre><code>from amano.item import from_dict, Item\n\n\nclass Forum(Item):\n    ForumName: str\n    Category: str\n    Threads: int = 0\n    Messages: int = 0\n    Views: int = 0\n\n\nitem = from_dict(\n    Forum,\n    {\n        \"ForumName\": \"Forum Name\",\n        \"Category\": \"Category Name\"\n    }\n)\n</code></pre> Instantiation from raw DynamoDB's data<pre><code>from amano.item import hydrate, Item\n\n\nclass Forum(Item):\n    ForumName: str\n    Category: str\n    Threads: int = 0\n    Messages: int = 0\n    Views: int = 0\n\n\nitem = hydrate(\n    Forum,\n    {\n        \"ForumName\": {\"S\": \"Forum Name\"},\n        \"Category\": {\"S\": \"Category Name\"}\n    }\n)\n</code></pre>"},{"location":"cookbook/#serialisation","title":"Serialisation","text":"Serialisation item to dict<pre><code>from amano.item import as_dict, Item\n\n\nclass Forum(Item):\n    ForumName: str\n    Category: str\n    Threads: int = 0\n    Messages: int = 0\n    Views: int = 0\n\n    def __init__(self, name: str, category: str):\n        self.ForumName = name\n        self.Category = category\n\n\nitem = Forum(\"Forum Name\", \"Forum Category\")\nprint(as_dict(item))\n</code></pre> Serialisation item to DynamoDB's format<pre><code>from amano.item import extract, Item\n\n\nclass Forum(Item):\n    ForumName: str\n    Category: str\n    Threads: int = 0\n    Messages: int = 0\n    Views: int = 0\n\n    def __init__(self, name: str, category: str):\n        self.ForumName = name\n        self.Category = category\n\n\nitem = Forum(\"Forum Name\", \"Forum Category\")\nprint(extract(item))\n</code></pre>"},{"location":"cookbook/#mapping","title":"Mapping","text":"Mapping from PascalCase<pre><code>from amano import Item, AttributeMapping\nfrom dataclasses import dataclass\n\n\n@dataclass\nclass Forum(Item, mapping=AttributeMapping.PASCAL_CASE):\n    forum_name: str\n    category: str\n    threads: int = 0\n    messages: int = 0\n    views: int = 0\n</code></pre> Mapping using custom schema<pre><code>import boto3\nfrom amano import Table, Item\nfrom dataclasses import dataclass\n\nclient = boto3.client(\"dynamodb\")\n\n\n@dataclass\nclass Forum(Item, mapping={\n    \"forum_name\": \"ForumName\",\n    \"category\": \"Category\",\n    \"threads\": \"Threads\",\n    \"messages\": \"Messages\",\n    \"views\": \"Views\",\n}):\n    forum_name: str\n    category: str\n    threads: int = 0\n    messages: int = 0\n    views: int = 0\n\n\nforum_table = Table[Forum](client, table_name=\"Forum\")\n</code></pre>"},{"location":"cookbook/#advanced-features","title":"Advanced features","text":"Getting item's state<pre><code>from amano.item import Item, get_item_state\n\n\nclass Forum(Item):\n    forum_name: str\n    category: str\n    threads: int = 0\n    messages: int = 0\n    views: int = 0\n\n    def __init__(self, name: str, category: str) -&gt; None:\n        self.forum_name = name\n        self.category = category\n\n\nitem = Forum(\"Forum Name\", \"Category\")\nprint(get_item_state(item))  # ItemState.NEW\n\nitem.forum_name = \"New Name\"\nprint(get_item_state(item))  # ItemState.DIRTY\n</code></pre> Commiting item's changes<pre><code>from amano.item import Item, get_item_state, commit\n\n\nclass Forum(Item):\n    forum_name: str\n    category: str\n    threads: int = 0\n    messages: int = 0\n    views: int = 0\n\n    def __init__(self, name: str, category: str) -&gt; None:\n        self.forum_name = name\n        self.category = category\n\n\nitem = Forum(\"Forum Name\", \"Category\")\nitem.forum_name = \"New Name\"\nprint(get_item_state(item))  # ItemState.DIRTY\n\ncommit(item)\nprint(get_item_state(item))  # ItemState.CLEAN\n</code></pre> Generating item's diff<pre><code>from amano.item import Item, get_item_state, commit, diff\n\n\nclass Forum(Item):\n    forum_name: str\n    category: str\n    threads: int = 0\n    messages: int = 0\n    views: int = 0\n\n    def __init__(self, name: str, category: str) -&gt; None:\n        self.forum_name = name\n        self.category = category\n\n\nitem = Forum(\"Forum Name\", \"Category\")\nitem.forum_name = \"New Name\"\n\nprint(diff(item))\n# ('SET forum_name = :forum_name ', {':forum_name': 'New Name'})\n</code></pre>"},{"location":"cookbook/#table","title":"Table","text":""},{"location":"cookbook/#item-storage","title":"Item storage","text":"Item storage using put method<pre><code>import boto3\nfrom amano import Table, Item\nfrom dataclasses import dataclass\n\nclient = boto3.client(\"dynamodb\")\n\n\n@dataclass\nclass Forum(Item):\n    ForumName: str\n    Category: str\n    Threads: int = 0\n    Messages: int = 0\n    Views: int = 0\n\n\nforum_table = Table[Forum](client, table_name=\"Forum\")\nforum_table.put(Forum(ForumName=\"Amano Forum\", Category=\"Amazon DynamoDB\"))\n</code></pre>"},{"location":"cookbook/#item-retrieval","title":"Item retrieval","text":"Get an item by a partition key<pre><code>import boto3\nfrom amano import Table, Item\nfrom dataclasses import dataclass\n\nclient = boto3.client(\"dynamodb\")\n\n\n@dataclass\nclass Forum(Item):\n    ForumName: str\n    Category: str\n    Threads: int = 0\n    Messages: int = 0\n    Views: int = 0\n\n\nforum_table = Table[Forum](client, table_name=\"Forum\")\nforum_table.get(\"Amazon DynamoDB\")\n</code></pre> Get an item by a partition key<pre><code>import boto3\nfrom amano import Table, Item\nfrom dataclasses import dataclass\n\nclient = boto3.client(\"dynamodb\")\n\n\n@dataclass\nclass Forum(Item):\n    ForumName: str\n    Category: str\n    Threads: int = 0\n    Messages: int = 0\n    Views: int = 0\n\n\nforum_table = Table[Forum](client, table_name=\"Forum\")\nforum_table.get(\"Amazon DynamoDB\")\n</code></pre>"},{"location":"cookbook/#working-with-cursor","title":"Working with cursor","text":"Cursor a basic usage<pre><code>from amano import Table, Item\nimport boto3\n\nclient = boto3.client(\"dynamodb\")\n\n\nclass Thread(Item):\n    ForumName: str\n    Subject: str\n    Message: str\n    LastPostedBy: str\n    Replies: int = 0\n    Views: int = 0\n\n\nforum_table = Table[Thread](client, table_name=\"Thread\")\n\ncursor = forum_table.query(\n    key_condition=(Thread.ForumName == \"Amazon DynamoDB\")\n)\nfor item in cursor:\n    print(item)\n</code></pre> Fetching items<pre><code>from amano import Table, Item\nimport boto3\n\nclient = boto3.client(\"dynamodb\")\n\n\nclass Thread(Item):\n    ForumName: str\n    Subject: str\n    Message: str\n    LastPostedBy: str\n    Replies: int = 0\n    Views: int = 0\n\n\nforum_table = Table[Thread](client, table_name=\"Thread\")\n\ncursor = forum_table.query(\n    key_condition=(Thread.ForumName == \"Amazon DynamoDB\")\n)\n\n# Fetch 5 first items\nthreads = cursor.fetch(5)\n</code></pre> Counting items<pre><code>from amano import Table, Item\nimport boto3\n\nclient = boto3.client(\"dynamodb\")\n\n\nclass Thread(Item):\n    ForumName: str\n    Subject: str\n    Message: str\n    LastPostedBy: str\n    Replies: int = 0\n    Views: int = 0\n\n\nforum_table = Table[Thread](client, table_name=\"Thread\")\n\ncursor = forum_table.query(\n    key_condition=(Thread.ForumName == \"Amazon DynamoDB\")\n)\n\nthreads_number = cursor.count()\n</code></pre>"},{"location":"cookbook/#item-update","title":"Item update","text":"Update item<pre><code>from amano import Table, Item\nimport boto3\nfrom dataclasses import dataclass\n\nclient = boto3.client(\"dynamodb\")\n\n\n@dataclass\nclass Forum(Item):\n    ForumName: str\n    Category: str\n    Threads: int = 0\n    Messages: int = 0\n    Views: int = 0\n\n\nforum_table = Table[Forum](client, table_name=\"Forum\")\namano_forum = forum_table.get(\"Amano Forum\")\namano_forum.Category = \"Other Category\"\n\nassert forum_table.update(amano_forum)\n</code></pre>"},{"location":"cookbook/#item-deletion","title":"Item deletion","text":"Delete item<pre><code>from amano import Table, Item\nimport boto3\nfrom dataclasses import dataclass\n\nclient = boto3.client(\"dynamodb\")\n\n\n@dataclass\nclass Forum(Item):\n    ForumName: str\n    Category: str\n    Threads: int = 0\n    Messages: int = 0\n    Views: int = 0\n\n\nforum_table = Table[Forum](client, table_name=\"Forum\")\n\n# get an item\nitem = forum_table.get(\"Amano Forum\", \"Amazon DynamoDB\")\n\n# delete it\nforum_table.delete(item)\n</code></pre> Delete item by PK<pre><code>from amano import Table, Item, item\nimport boto3\nfrom dataclasses import dataclass\n\nclient = boto3.client(\"dynamodb\")\n\n\n@dataclass\nclass Forum(Item):\n    ForumName: str\n    Category: str\n    Threads: int = 0\n    Messages: int = 0\n    Views: int = 0\n\n\nforum_table = Table[Forum](client, table_name=\"Forum\")\n\n# Delete item by PK (ForumName)\nforum_table.delete(item.from_dict(Forum, {\"ForumName\": \"name\"}))\n</code></pre>"},{"location":"cookbook/#querying","title":"Querying","text":"Query a table<pre><code>from amano import Table, Item\nimport boto3\n\nclient = boto3.client(\"dynamodb\")\n\n\nclass Thread(Item):\n    ForumName: str\n    Subject: str\n    Message: str\n    LastPostedBy: str\n    Replies: int = 0\n    Views: int = 0\n\n\nforum_table = Table[Thread](client, table_name=\"Thread\")\nresult = forum_table.query(\n    key_condition=(Thread.ForumName == \"Amazon DynamoDB\")\n)\n</code></pre> Query with a filter condition<pre><code>from amano import Table, Item\nimport boto3\n\nclient = boto3.client(\"dynamodb\")\n\n\nclass Thread(Item):\n    ForumName: str\n    Subject: str\n    Message: str\n    LastPostedBy: str\n    Replies: int = 0\n    Views: int = 0\n\n\nforum_table = Table[Thread](client, table_name=\"Thread\")\nresult = forum_table.query(\n    key_condition=(Thread.ForumName == \"Amazon DynamoDB\"),\n    filter_condition=Thread.Message.startswith(\"I\"),\n)\n</code></pre>"},{"location":"cookbook_header/","title":"Cookbook header","text":"<p>The following examples rely on AWS Discussion Forum Data Model.</p> <p>You can also have a direct look at our cookbook to find fully featured code examples.</p>"},{"location":"item/advanced_features/","title":"Advanced features of the Item class","text":"<p>Features described in this section are used internally by the library and its components. It is not required to familiarise yourself with  them in order to effectively use the library.</p> <p>Each change in the instance of the <code>amano.Item</code> subclass is recorded and stored in a memory. </p> <p>The following guide can help you to understand how you can use these features in your applications.</p>"},{"location":"item/advanced_features/#getting-item-state","title":"Getting item state","text":"<p>An Item can be in one of the following three states:</p> <ul> <li><code>new</code></li> <li><code>clean</code></li> <li><code>dirty</code></li> </ul> <p>A <code>new</code> state means that object has been just instantiated and no properties were modified.</p> <p>A <code>clean</code> state means that object has been modified, and it is synchronized with its database representation.</p> <p>A <code>dirty</code> state means that object has been modified, and it is not synchronized with its database representation.</p> <p>The following code example shows state changes of an object:</p> Getting item's state<pre><code>from amano.item import Item, get_item_state\n\n\nclass Forum(Item):\n    forum_name: str\n    category: str\n    threads: int = 0\n    messages: int = 0\n    views: int = 0\n\n    def __init__(self, name: str, category: str) -&gt; None:\n        self.forum_name = name\n        self.category = category\n\n\nitem = Forum(\"Forum Name\", \"Category\")\nprint(get_item_state(item))  # ItemState.NEW\n\nitem.forum_name = \"New Name\"\nprint(get_item_state(item))  # ItemState.DIRTY\n</code></pre> <p>Note: to set item back to a <code>clean</code> state you have to commit its changes.</p>"},{"location":"item/advanced_features/#committing-the-changes","title":"Committing the changes","text":"Commiting item's changes<pre><code>from amano.item import Item, get_item_state, commit\n\n\nclass Forum(Item):\n    forum_name: str\n    category: str\n    threads: int = 0\n    messages: int = 0\n    views: int = 0\n\n    def __init__(self, name: str, category: str) -&gt; None:\n        self.forum_name = name\n        self.category = category\n\n\nitem = Forum(\"Forum Name\", \"Category\")\nitem.forum_name = \"New Name\"\nprint(get_item_state(item))  # ItemState.DIRTY\n\ncommit(item)\nprint(get_item_state(item))  # ItemState.CLEAN\n</code></pre> <p>Note: that <code>commit</code> function just creates a commit info inside the item instance. This means it is not persisted in the database, even if you use an <code>amano.Table.update</code> or <code>amano.Table.save</code>, the item will be in the <code>clean</code> state and won't be updated.</p>"},{"location":"item/advanced_features/#generating-diff-for-an-item","title":"Generating diff for an item","text":"<p>A diff is a tuple containing two values. First value is a string representation of an update query (when performed it will synchronise the item with its database representation). The second value is a key-value object used to interpolate the query string.</p> Generating item's diff<pre><code>from amano.item import Item, get_item_state, commit, diff\n\n\nclass Forum(Item):\n    forum_name: str\n    category: str\n    threads: int = 0\n    messages: int = 0\n    views: int = 0\n\n    def __init__(self, name: str, category: str) -&gt; None:\n        self.forum_name = name\n        self.category = category\n\n\nitem = Forum(\"Forum Name\", \"Category\")\nitem.forum_name = \"New Name\"\n\nprint(diff(item))\n# ('SET forum_name = :forum_name ', {':forum_name': 'New Name'})\n</code></pre>"},{"location":"item/defining_item/","title":"Defining Item","text":"<p>The following examples rely on AWS Discussion Forum Data Model.</p> <p>You can also have a direct look at our cookbook to find fully featured code examples.</p> <p>The example below defines a <code>Forum</code> class, which represents a record in a DynamoDB's table. The <code>Forum</code> class is required to instantiate parametrised <code>amano.Table</code> class that abstracts access to Dynamodb's table.</p> <p>Please note that property names in the following example do not follow the PEP standards. The reason is that those names correspond to field names present in Dynamodb's Item. To fix this issue, please look into a Mapping Section.</p>"},{"location":"item/defining_item/#basic-item-definition","title":"Basic item definition","text":"Basic Item Example<pre><code>from amano import Item\n\n\nclass Forum(Item):\n    ForumName: str\n    Category: str\n    Threads: int = 0\n    Messages: int = 0\n    Views: int = 0\n</code></pre> <p>Please note: <code>Forum</code> class extends <code>amano.Item</code> class. This is required by <code>amano.Table</code> to work properly. All the table's information, including; indexes, fields, projections, etc., are handled automatically and do not require any work on the developer's side.</p>"},{"location":"item/defining_item/#built-in-initializer","title":"Built-in initializer","text":"<p>By default, if there is no initializer specified for <code>amano.Item</code> subclass, it will behave like a dataclass. This means you can just instantiate a class with its properties like in the example below:</p> Built-in item initializer<pre><code>from amano import Item\n\n\nclass Forum(Item):\n    ForumName: str\n    Category: str\n    Threads: int = 0\n    Messages: int = 0\n    Views: int = 0\n\n\nitem = Forum(ForumName=\"Forum Name\", Category=\"Category\")\n</code></pre>"},{"location":"item/defining_item/#dataclass-integration","title":"Dataclass integration","text":"<p>Any subclass of <code>amano.Item</code> can be used with dataclasses python's package.</p> Dataclass integration<pre><code>from amano import Item\nfrom dataclasses import dataclass\n\n\n@dataclass\nclass Forum(Item):\n    ForumName: str\n    Category: str\n    Threads: int = 0\n    Messages: int = 0\n    Views: int = 0\n</code></pre>"},{"location":"item/field_mapping/","title":"Field mapping","text":"<p>Usually, schema of persisted data is different from its memory representation. Amano provides a powerful mapping mechanism to cover this scenario. Mapping is an operation which associates each element from one set of data (in-memory representation) to one or more elements of another set of data (Dynamodb table).</p> <p>The following examples rely on AWS Discussion Forum Data Model.</p> <p>You can also have a direct look at our cookbook to find fully featured code examples.</p>"},{"location":"item/field_mapping/#mapping-with-pre-build-strategies","title":"Mapping with pre-build strategies","text":"Mapping from PascalCase<pre><code>from amano import Item, AttributeMapping\nfrom dataclasses import dataclass\n\n\n@dataclass\nclass Forum(Item, mapping=AttributeMapping.PASCAL_CASE):\n    forum_name: str\n    category: str\n    threads: int = 0\n    messages: int = 0\n    views: int = 0\n</code></pre> <p>The above example will use a built-in mapping strategy, which expects table's field names to follow PascalCase convention, and it will map them to standard python's snake case.</p> <p>The following is the list of available mapping strategies:</p> <ul> <li><code>Mapping.PASS_THROUGH</code></li> <li><code>Mapping.PASCAL_CASE</code></li> <li><code>Mapping.CAMEL_CASE</code></li> <li><code>Mapping.HYPHENS</code></li> </ul>"},{"location":"item/field_mapping/#mapping-with-custom-schema","title":"Mapping with custom schema","text":"<p>The <code>mapping</code> argument can also accept any <code>Dict[str, str]</code>.  The dict keys should correspond to class attributes and its values  to table's field names. Please see the example below:</p> Mapping using custom schema<pre><code>import boto3\nfrom amano import Table, Item\nfrom dataclasses import dataclass\n\nclient = boto3.client(\"dynamodb\")\n\n\n@dataclass\nclass Forum(Item, mapping={\n    \"forum_name\": \"ForumName\",\n    \"category\": \"Category\",\n    \"threads\": \"Threads\",\n    \"messages\": \"Messages\",\n    \"views\": \"Views\",\n}):\n    forum_name: str\n    category: str\n    threads: int = 0\n    messages: int = 0\n    views: int = 0\n\n\nforum_table = Table[Forum](client, table_name=\"Forum\")\n</code></pre>"},{"location":"item/type_annotations/","title":"Type annotations","text":"<p>It is not required but in order to get better type support in mypy and your IDE it is recommended  to use <code>amano.Attribute</code> class when defining Item's attributes.  Consider the following example which is redefining the <code>Thread</code> class:</p> <pre><code>from dataclasses import dataclass\n\nfrom amano import Item, Attribute\n\n@dataclass\nclass Thread(Item):\n    ForumName: Attribute[str]\n    Subject: Attribute[str]\n    Message: Attribute[str]\n    LastPostedBy: Attribute[str]\n    Replies: Attribute[int] = 0\n    Views: Attribute[int] = 0\n</code></pre>"},{"location":"item/working_with/","title":"Working with the Item class","text":"<p>The following examples rely on AWS Discussion Forum Data Model.</p> <p>You can also have a direct look at our cookbook to find fully featured code examples.</p>"},{"location":"item/working_with/#instantiation","title":"Instantiation","text":"<p>From outside a subclass of the <code>amano.Item</code> class does not differ much from a normal class. You can instantiate it in the same way as a usual class; define an initializer and so on:</p>"},{"location":"item/working_with/#basic-instantiation","title":"Basic instantiation","text":"Basic instantiation<pre><code>from amano import Item\n\n\nclass Forum(Item):\n    ForumName: str\n    Category: str\n    Threads: int = 0\n    Messages: int = 0\n    Views: int = 0\n\n    def __init__(self, name: str, category: str):\n        self.ForumName = name\n        self.Category = category\n\n\nitem = Forum(\"Forum Name\", \"Category Name\")\n</code></pre>"},{"location":"item/working_with/#instantiating-from-a-dict","title":"Instantiating from a dict","text":"<p>Any subclass of <code>amano.Item</code> can be instantiated with <code>amano.item.from_dict</code> function.</p> Instantiation using a dict<pre><code>from amano.item import from_dict, Item\n\n\nclass Forum(Item):\n    ForumName: str\n    Category: str\n    Threads: int = 0\n    Messages: int = 0\n    Views: int = 0\n\n\nitem = from_dict(\n    Forum,\n    {\n        \"ForumName\": \"Forum Name\",\n        \"Category\": \"Category Name\"\n    }\n)\n</code></pre>"},{"location":"item/working_with/#dynamodb-raw-item-instantiation","title":"DynamoDB raw item instantiation","text":"<p>You can also instantiate your item class using raw data coming directly from DynamoDB. </p> Instantiation using data coming directly from DynamoDB<pre><code>from amano.item import hydrate, Item\n\n\nclass Forum(Item):\n    ForumName: str\n    Category: str\n    Threads: int = 0\n    Messages: int = 0\n    Views: int = 0\n\n\nitem = hydrate(\n    Forum,\n    {\n        \"ForumName\": {\"S\": \"Forum Name\"},\n        \"Category\": {\"S\": \"Category Name\"}\n    }\n)\n</code></pre>"},{"location":"item/working_with/#serialisation","title":"Serialisation","text":""},{"location":"item/working_with/#basic-serialisation","title":"Basic serialisation","text":"<p>Any instance of <code>amano.Item</code> subclass can be easy transformed into dictionary:</p> Serialisation item to dict<pre><code>from amano.item import as_dict, Item\n\n\nclass Forum(Item):\n    ForumName: str\n    Category: str\n    Threads: int = 0\n    Messages: int = 0\n    Views: int = 0\n\n    def __init__(self, name: str, category: str):\n        self.ForumName = name\n        self.Category = category\n\n\nitem = Forum(\"Forum Name\", \"Forum Category\")\nprint(as_dict(item))\n</code></pre>"},{"location":"item/working_with/#serialisation-to-dynamodbs-format","title":"Serialisation to DynamoDB's format","text":"Serialisation item to DynamoDB's format<pre><code>from amano.item import extract, Item\n\n\nclass Forum(Item):\n    ForumName: str\n    Category: str\n    Threads: int = 0\n    Messages: int = 0\n    Views: int = 0\n\n    def __init__(self, name: str, category: str):\n        self.ForumName = name\n        self.Category = category\n\n\nitem = Forum(\"Forum Name\", \"Forum Category\")\nprint(extract(item))\n</code></pre>"},{"location":"table/basic_usage/","title":"Basic Usage","text":""},{"location":"table/basic_usage/#item-storage","title":"Item storage","text":"<p>To store Item, you can use the <code>put</code> or <code>save</code> method of <code>amano.Table</code> class. The difference between those two methods is that <code>save</code> can understand state of the Item and can execute either <code>PutItem</code> or <code>UpdateItem</code> operation depending on the scenario. </p> <p>On the other hand, the <code>Put</code> method always executes <code>PutItem</code> expression. Which creates or fully overrides existing Item in case where no condition is provided.</p> <p>Both <code>put</code> and <code>save</code> methods allow using conditional expressions.</p> Using put method<pre><code>import boto3\nfrom amano import Table, Item\nfrom dataclasses import dataclass\n\nclient = boto3.client(\"dynamodb\")\n\n\n@dataclass\nclass Forum(Item):\n    ForumName: str\n    Category: str\n    Threads: int = 0\n    Messages: int = 0\n    Views: int = 0\n\n\nforum_table = Table[Forum](client, table_name=\"Forum\")\nforum_table.put(Forum(ForumName=\"Amano Forum\", Category=\"Amazon DynamoDB\"))\n</code></pre>"},{"location":"table/basic_usage/#item-retrieval","title":"Item retrieval","text":"<p>Dynamodb allows to choose between two types of primary keys: - Partition key. It is a simplified primary key. It means there  should be no two items in a table with the same partition key value. - Composite key. It is a combination of the partition key and sort key.  This means there might be items in a table with the same partition key, but they must have different sort key values.</p>"},{"location":"table/basic_usage/#retrieving-by-a-partition-key","title":"Retrieving by a partition key","text":"Get an item by a partition key<pre><code>import boto3\nfrom amano import Table, Item\nfrom dataclasses import dataclass\n\nclient = boto3.client(\"dynamodb\")\n\n\n@dataclass\nclass Forum(Item):\n    ForumName: str\n    Category: str\n    Threads: int = 0\n    Messages: int = 0\n    Views: int = 0\n\n\nforum_table = Table[Forum](client, table_name=\"Forum\")\nforum_table.get(\"Amazon DynamoDB\")\n</code></pre>"},{"location":"table/basic_usage/#retrieving-by-a-composite-key","title":"Retrieving by a composite key","text":"<p>If your table defines composite key (key composed of a partition key and a sort key), you must provide both values in the get method, like below:</p> Retrieve by a composite key<pre><code>import boto3\nfrom amano import Table, Item\nfrom dataclasses import dataclass\n\nclient = boto3.client(\"dynamodb\")\n\n\n@dataclass\nclass Thread(Item):\n    ForumName: str\n    Subject: str\n    Message: str\n    LastPostedBy: str\n    Replies: int = 0\n    Views: int = 0\n\n\nforum_table = Table[Thread](client, table_name=\"Thread\")\nforum_table.get(\"Amazon DynamoDB\", \"Tagging tables\")\n</code></pre>"},{"location":"table/basic_usage/#item-update","title":"Item update","text":"<p><code>Table.update</code> edits an existing item's attributes. The difference between <code>put</code> and <code>update</code> is that update calculates Item's changes and performs a query only for the attributes that were changed. To update an Item, it must be retrieved first.</p> Udpdate item<pre><code>from amano import Table, Item\nimport boto3\nfrom dataclasses import dataclass\n\nclient = boto3.client(\"dynamodb\")\n\n\n@dataclass\nclass Forum(Item):\n    ForumName: str\n    Category: str\n    Threads: int = 0\n    Messages: int = 0\n    Views: int = 0\n\n\nforum_table = Table[Forum](client, table_name=\"Forum\")\namano_forum = forum_table.get(\"Amano Forum\")\namano_forum.Category = \"Other Category\"\n\nassert forum_table.update(amano_forum)\n</code></pre>"},{"location":"table/basic_usage/#item-deletion","title":"Item deletion","text":"<p>DynamoDB identifies each item by a primary key. In order to delete an item you have to identify it first. In Amano identification is done by retrieval, like in the example below:</p> Delete item<pre><code>from amano import Table, Item\nimport boto3\nfrom dataclasses import dataclass\n\nclient = boto3.client(\"dynamodb\")\n\n\n@dataclass\nclass Forum(Item):\n    ForumName: str\n    Category: str\n    Threads: int = 0\n    Messages: int = 0\n    Views: int = 0\n\n\nforum_table = Table[Forum](client, table_name=\"Forum\")\n\n# get an item\nitem = forum_table.get(\"Amano Forum\", \"Amazon DynamoDB\")\n\n# delete it\nforum_table.delete(item)\n</code></pre> <p>If you know the primary key upfront you can simply delete an item without retrieving it. Please consider the following example:</p> Delete item by PK<pre><code>from amano import Table, Item, item\nimport boto3\nfrom dataclasses import dataclass\n\nclient = boto3.client(\"dynamodb\")\n\n\n@dataclass\nclass Forum(Item):\n    ForumName: str\n    Category: str\n    Threads: int = 0\n    Messages: int = 0\n    Views: int = 0\n\n\nforum_table = Table[Forum](client, table_name=\"Forum\")\n\n# Delete item by PK (ForumName)\nforum_table.delete(item.from_dict(Forum, {\"ForumName\": \"name\"}))\n</code></pre>"},{"location":"table/conditional_writes/","title":"Conditional writes","text":"<p><code>Put</code>, <code>update</code>, <code>save</code> and <code>delete</code> are all conditional operations, which means you can define what is required in order to perform the operation (e.g., update Item only if given attribute exists, or when it asserts against given value). </p> <p>Amano supports this conditional operations with provided abstraction built on the top of python's comparison operators (<code>==</code>, <code>=!</code>, <code>&gt;</code>, <code>&gt;=</code> <code>&lt;</code>, <code>&lt;=</code>) and bitwise operators (<code>&amp;</code> - and, <code>|</code> - or).</p>"},{"location":"table/conditional_writes/#conditional-update","title":"Conditional Update","text":"<p>The below example shows how to update an Item in a certain situation. More complex conditions can be used, to learn more head to Comparison operators and functions.</p> <pre><code>from dataclasses import dataclass\n\nimport boto3\nfrom amano import Table, Item\n\nclient = boto3.client(\"dynamodb\")\n\n@dataclass\nclass Forum(Item):\n    ForumName: str\n    Category: str\n    Threads: int = 0\n    Messages: int = 0\n    Views: int = 0\n\nforum_table = Table[Forum](client, table_name=\"Forum\")\namano_forum = forum_table.get(\"Amano Forum\")\namano_forum.Category = \"Other Category\"\n\n# Update forum only if there are no messages\nassert forum_table.update(amano_forum, Forum.Messages == 0)\n</code></pre>"},{"location":"table/consistency/","title":"Consistency model","text":"<p>Both <code>query</code> and <code>get</code> methods of the <code>Table</code> class are supporting strongly consistent reads. To use strongly consistent reads, set <code>consistent_read</code> parameter to <code>True</code>:</p> <pre><code>from dataclasses import dataclass\n\nimport boto3\nfrom amano import Table, Item\n\nclient = boto3.client(\"dynamodb\")\n\n@dataclass\nclass Thread(Item):\n    ForumName: str\n    Subject: str\n    Message: str\n    LastPostedBy: str\n    Replies: int = 0\n    Views: int = 0\n\nforum_table = Table[Thread](client, table_name=\"Thread\")\n\nforum_table.get(\"Amazon DynamoDB\", \"Tagging tables\", consistent_read=True)\n</code></pre> <p>To learn more about Dynamodb's read consistency click here</p>"},{"location":"table/operators_functions/","title":"Comparison operators and functions","text":"<p>Amano supports all the comparison operators and functions of Dynamodb and provides an elegant abstraction around them, which simplifies querying and filtering Dynamodb tables.</p> <p>About this guide</p> <p>This guide uses the following symbols to provide a comprehensive list of examples:</p> <ul> <li><code>{value: type}</code> is used to reference any valid value you may use in a condition of a given type. If no <code>type</code> is specified it applies to all types.</li> <li><code>Item</code> is used to reference to an item class</li> <li><code>{attribute: type}</code> is used to reference to an attribute of an item class of a given type <code>type</code>. If no <code>type</code> is specified it applies to all types.</li> </ul>"},{"location":"table/operators_functions/#comparison-operators","title":"Comparison operators","text":""},{"location":"table/operators_functions/#equals","title":"Equals","text":"<p>Matches all items in a table where <code>{attribute}</code>'s value is equal to a <code>{value}</code>.</p> StructureExample <pre><code>Item.{attribute} == {value}\n</code></pre> <pre><code>User.name == \"Bob\"\n</code></pre>"},{"location":"table/operators_functions/#lower-than","title":"Lower than","text":"<p>Matches all items in a table where <code>{attribute}</code>'s value is lower than a <code>{value}</code>.</p> StructureExample <pre><code>Item.{attribute: numeric} &lt; {value: numeric}\n</code></pre> <pre><code>User.age &lt; 130\n</code></pre>"},{"location":"table/operators_functions/#lower-or-equal","title":"Lower or equal","text":"<p>Matches all items in a table where <code>{attribute}</code>'s value is lower or equal to a <code>{value}</code>.</p> StructureExample <pre><code>Item.{attribute: numeric} &lt;= {value: numeric}\n</code></pre> <pre><code>Wallet.value &lt;= 10.5\n</code></pre>"},{"location":"table/operators_functions/#greater-than","title":"Greater than","text":"<p>Matches all items in a table where <code>{attribute}</code>'s value is greater than  a <code>{value}</code>.</p> StructureExample <pre><code>Item.{attribute: numeric} &gt; {value: numeric}\n</code></pre> <pre><code>Wallet.value &gt; 0.1\n</code></pre>"},{"location":"table/operators_functions/#greater-or-equal","title":"Greater or equal","text":"<p>Matches all items in a table where <code>{attribute}</code>'s value is lower or equal to a <code>{value}</code>.</p> StructureExample <pre><code>Item.{attribute: numeric} &gt;= {value: numeric}\n</code></pre> <pre><code>User.age &gt;= 18\n</code></pre>"},{"location":"table/operators_functions/#between","title":"Between","text":"<p>Matches all items in a table where <code>{attribute}</code>'s value is greater than or equals to <code>{value_a}</code> and lower than or equals to <code>{value_b}</code>.</p> StructureExample <pre><code>Item.{attribute: numeric}.between({value_a: numeric}, {value_b: numeric})\n</code></pre> <pre><code>User.age.between(18, 120)\n</code></pre>"},{"location":"table/operators_functions/#functions","title":"Functions","text":""},{"location":"table/operators_functions/#not-exists","title":"(Not) Exists","text":"<p>Matches all items in a table where <code>{attribute}</code> is (not) defined in the given item.</p> StructureExample <pre><code>Item.{attribute}.exists()\nItem.{attribute}.not_exists()\n</code></pre> <pre><code>User.age.exists()\nUser.age.not_exists()\n</code></pre>"},{"location":"table/operators_functions/#is-type","title":"Is Type","text":"<p>Matches all items in a table where <code>{attribute}</code> is of a given type. Passed type must be an instance of <code>amano.AttributeType</code> class. Supported values are:</p> <ul> <li>for string type - <code>amano.AttributeType.STRING</code> </li> <li>for numeric types - <code>amano.AttributeType.NUMBER</code></li> <li>for boolean type - <code>amano.AttributeType.BOOLEAN</code> </li> <li>for binary types - <code>amano.AttributeType.BINARY</code> </li> <li>for none type - <code>amano.AttributeType.NULL</code> </li> <li>for list types - <code>amano.AttributeType.LIST</code> </li> <li>for map types - <code>amano.AttributeType.MAP</code> </li> <li>for number set - <code>amano.AttributeType.NUMBER_SET</code> </li> <li>for string set - <code>amano.AttributeType.STRING_SET</code> </li> <li>for binary set - <code>amano.AttributeType.BINARY_SET</code> </li> <li>for any type - <code>amano.AttributeType.ANY</code> </li> </ul> StructureExample <pre><code>Item.{attribute}.is_type({value: amano.AttributeType.NUMBER})\n</code></pre> <pre><code>User.age.is_type(amano.AttributeType.NUMBER)\n</code></pre>"},{"location":"table/operators_functions/#begins-with","title":"Begins with","text":"<p>Matches all items in a table where <code>{attribute}</code> starts of a given string <code>{value}</code>. There is an alternate function called <code>startswith</code>, which can be used interchangeably.</p> StructureExample <pre><code>Item.{attribute}.begins_with({value: string})\nItem.{attribute}.startswith({value: string})\n</code></pre> <pre><code>User.name.begins_with(\"I\")\nUser.name.startswith(\"I\")\n</code></pre>"},{"location":"table/operators_functions/#contains","title":"Contains","text":"<p>Matches all items in a table where <code>{attribute}</code> contains a value <code>{value}</code>.</p> StructureExample <pre><code>Item.{attribute: list|set|string}.contains({value})\n</code></pre> <pre><code>User.name.contains(\"a\")\nUser.favourites.contains(\"music\")\n</code></pre>"},{"location":"table/operators_functions/#in","title":"In","text":"<p>Matches all items in a table where <code>{attribute}</code>'s value is within a list of values <code>{value}</code>. When comparing size you can use any of comparison operators.</p> StructureExample <pre><code>Item.{attribute}.in({value})\n</code></pre> <pre><code>User.country.in([\"US\", \"UK\"])\n</code></pre>"},{"location":"table/operators_functions/#size","title":"Size","text":"<p>Matches all items in a table where <code>{attribute}</code> is sized or its size passes a comparison with a <code>{value}</code>. You can use all comparison operators except <code>between</code>. </p> StructureExample <pre><code>Item.{attribute}.size()\nItem.{attribute}.size() &gt; {value}\n</code></pre> <pre><code>User.favourites.size()\nUser.favourites.size() &gt; 2\n</code></pre>"},{"location":"table/operators_functions/#logical-evaluations","title":"Logical evaluations","text":"<p>Use the <code>and</code>, <code>or</code>, and <code>not</code> python's logical operators to perform logical evaluations in your queries. </p> <p>Because logical operations in python takes any precedence over comparison operations make sure to wrap comparison operations in parentheses. Otherwise, your query may result in an error. </p> <p>For example, this is valid: <pre><code>(User.favourites.size() &gt; 1) and (User.favourites.size() &lt; 20)\n</code></pre></p> <p>And the below will result in an error (as <code>1</code> and <code>User.favourites.size()</code> will be executed as an expression before the comparison):</p> <pre><code>User.favourites.size() &gt; 1 and User.favourites.size() &lt; 20\n</code></pre> <p>You can also use additional parentheses (like you would normally do in python) to change the precedence of a logical evaluation.</p>"},{"location":"table/operators_functions/#sort-key-evaluation","title":"Sort key evaluation","text":"<p>The sort key has a specific functionality in DynamoDB, thus it supports only limited amount of operators</p> <p>Supported comparisons operators</p> <ul> <li>equals <code>==</code></li> <li>greater than <code>&gt;</code></li> <li>greater or equals <code>&gt;=</code></li> <li>lower than <code>&lt;</code></li> <li>lower or equals <code>&lt;=</code></li> <li>between <code>field.between(a, b)</code></li> </ul> <p>Supported functions</p> <ul> <li><code>begins_with</code> (aka <code>startswith</code>)</li> </ul>"},{"location":"table/retrieving_items/","title":"Retrieving items from a table","text":"<p>There are two ways to retrieve your data from DynamoDB's table:</p> <ul> <li>by querying a table <code>(amano.Table.query)</code></li> <li>by scanning a table <code>(amano.Table.scan)</code></li> </ul> <p>Differences between those two operations are in performance, cost and flexibility. Generally speaking you should always favour query over scan. </p> <p>To query a table you have to first instantiate <code>amano.Table</code> generic class, and execute a query method and pass a search criteria through <code>key_condition</code> argument. Difference in interface between <code>amano</code> and <code>boto</code> libraries is the requirement of specifying an index and the construction of query itself. Amano is using more flexible and approachable solution.</p> <p>Amano can determine which index to use by looking at the fields in your key condition and the table's schema. If a corresponding index cannot be determined, the <code>query</code> method will throw an exception, and no actual request will be made to the table. Amano does all of this behind the scenes to save Dynamodb's quota.</p>"},{"location":"table/retrieving_items/#query-operation","title":"Query operation","text":"Query a table<pre><code>from amano import Table, Item\nimport boto3\n\nclient = boto3.client(\"dynamodb\")\n\n\nclass Thread(Item):\n    ForumName: str\n    Subject: str\n    Message: str\n    LastPostedBy: str\n    Replies: int = 0\n    Views: int = 0\n\n\nforum_table = Table[Thread](client, table_name=\"Thread\")\nresult = forum_table.query(\n    key_condition=(Thread.ForumName == \"Amazon DynamoDB\")\n)\n</code></pre> <p>The above query will look for all items in the <code>Thread</code> table, where <code>ForumName</code> equals <code>Amazon DynamoDB</code>. Because the <code>Thread</code> table specifies the sort key (<code>Subject</code>), a search might be refined by using it in the <code>key_condition</code>.</p>"},{"location":"table/retrieving_items/#query-with-a-filter-condition","title":"Query with a filter condition","text":"<p>A filter condition enables you to further refine the query results. Filter condition is applied after a query. Therefore, a query consumes the same amount of read capacity.</p> <p>A filter condition cannot contain a partition key or a sort key, use a key condition instead for those attributes.</p> <p>A filter condition and key condition use the same mechanism, but filter condition uses wider range of operators.</p> <p>The following example shows how to use filter condition in an example query:</p> Query with a filter condition<pre><code>from amano import Table, Item\nimport boto3\n\nclient = boto3.client(\"dynamodb\")\n\n\nclass Thread(Item):\n    ForumName: str\n    Subject: str\n    Message: str\n    LastPostedBy: str\n    Replies: int = 0\n    Views: int = 0\n\n\nforum_table = Table[Thread](client, table_name=\"Thread\")\nresult = forum_table.query(\n    key_condition=(Thread.ForumName == \"Amazon DynamoDB\"),\n    filter_condition=Thread.Message.startswith(\"I\"),\n)\n</code></pre>"},{"location":"table/retrieving_items/#scan-operation","title":"Scan operation","text":"<p>Scan operations are very flexible as they can be run without prior index setup.</p> <p>When a scan operation is executed every item in a given table is being read, which as you can imagine is a heavy and costly operation. Thus scans operations should be used as a last bastion or in a specific scenarios.</p> Scan a table<pre><code>from amano import Table, Item\nimport boto3\n\nclient = boto3.client(\"dynamodb\")\n\n\nclass Thread(Item):\n    ForumName: str\n    Subject: str\n    Message: str\n    LastPostedBy: str\n    Replies: int = 0\n    Views: int = 0\n\n\nforum_table = Table[Thread](client, table_name=\"Thread\")\nresult = forum_table.scan(\n    Thread.Message.startswith(\"I \")\n)\n</code></pre>"},{"location":"table/retrieving_items/#working-with-cursor","title":"Working with cursor","text":"<p>Scan and query operations as a result are returning a cursor. Cursor is an iterator object which can be used to access items from your DynamoDB table. The simplest use case is to iterate through the cursor until it is exhausted, like in the example below:</p> Cursor a basic usage<pre><code>from amano import Table, Item\nimport boto3\n\nclient = boto3.client(\"dynamodb\")\n\n\nclass Thread(Item):\n    ForumName: str\n    Subject: str\n    Message: str\n    LastPostedBy: str\n    Replies: int = 0\n    Views: int = 0\n\n\nforum_table = Table[Thread](client, table_name=\"Thread\")\n\ncursor = forum_table.query(\n    key_condition=(Thread.ForumName == \"Amazon DynamoDB\")\n)\nfor item in cursor:\n    print(item)\n</code></pre>"},{"location":"table/retrieving_items/#fetching-items","title":"Fetching items","text":"<p>When iteration through all the results is not an option you can just fetch desired amount of items from a table by using the <code>fetch</code> method on a cursor object.</p> Fetching items<pre><code>from amano import Table, Item\nimport boto3\n\nclient = boto3.client(\"dynamodb\")\n\n\nclass Thread(Item):\n    ForumName: str\n    Subject: str\n    Message: str\n    LastPostedBy: str\n    Replies: int = 0\n    Views: int = 0\n\n\nforum_table = Table[Thread](client, table_name=\"Thread\")\n\ncursor = forum_table.query(\n    key_condition=(Thread.ForumName == \"Amazon DynamoDB\")\n)\n\n# Fetch 5 first items\nthreads = cursor.fetch(5)\n</code></pre> <p>The <code>fetch</code> method will try to retrieve the desired amount of items matching the search criteria from a table. If there are not enough items in the search result, the <code>fetch</code> method will return all items from the result. </p>"},{"location":"table/retrieving_items/#counting-items","title":"Counting items","text":"<p>To understand how many items have matched the search criteria you can use the <code>count</code> method of a cursor.</p> Counting items<pre><code>from amano import Table, Item\nimport boto3\n\nclient = boto3.client(\"dynamodb\")\n\n\nclass Thread(Item):\n    ForumName: str\n    Subject: str\n    Message: str\n    LastPostedBy: str\n    Replies: int = 0\n    Views: int = 0\n\n\nforum_table = Table[Thread](client, table_name=\"Thread\")\n\ncursor = forum_table.query(\n    key_condition=(Thread.ForumName == \"Amazon DynamoDB\")\n)\n\nthreads_number = cursor.count()\n</code></pre> <p>Warning</p> <p>The <code>count</code> method will retrieve all the items matching the search results and store them in the memory. Despite the fact that this can be the only option to understand the size of your result set, it should be used with care. </p>"}]}